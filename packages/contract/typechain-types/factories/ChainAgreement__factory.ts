/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ChainAgreement,
  ChainAgreementInterface,
} from "../ChainAgreement";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_initiator",
        type: "address",
      },
      {
        internalType: "address",
        name: "_acceptor",
        type: "address",
      },
      {
        internalType: "string",
        name: "_title",
        type: "string",
      },
      {
        internalType: "string",
        name: "_content_id",
        type: "string",
      },
    ],
    name: "createAgreement",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "initiator",
            type: "address",
          },
          {
            internalType: "address",
            name: "acceptor",
            type: "address",
          },
          {
            internalType: "string",
            name: "title",
            type: "string",
          },
          {
            internalType: "string",
            name: "content_id",
            type: "string",
          },
          {
            internalType: "bool",
            name: "isCreated",
            type: "bool",
          },
        ],
        internalType: "struct ChainAgreement.Agreement",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_content_id",
        type: "string",
      },
    ],
    name: "getAgreement",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "initiator",
            type: "address",
          },
          {
            internalType: "address",
            name: "acceptor",
            type: "address",
          },
          {
            internalType: "string",
            name: "title",
            type: "string",
          },
          {
            internalType: "string",
            name: "content_id",
            type: "string",
          },
          {
            internalType: "bool",
            name: "isCreated",
            type: "bool",
          },
        ],
        internalType: "struct ChainAgreement.Agreement",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610afa806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063c0b817401461003b578063cdd82d1d1461006b575b600080fd5b61005560048036038101906100509190610629565b61009b565b604051610062919061085c565b60405180910390f35b610085600480360381019061008091906106bc565b610289565b604051610092919061085c565b60405180910390f35b6100a36104ac565b600115156000836040516100b79190610825565b908152602001604051809103902060040160009054906101000a900460ff1615151415610119576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101109061083c565b60405180910390fd5b60006040518060a001604052808773ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff168152602001858152602001848152602001600115158152509050806000846040516101849190610825565b908152602001604051809103902060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600201908051906020019061023c929190610509565b506060820151816003019080519060200190610259929190610509565b5060808201518160040160006101000a81548160ff02191690831515021790555090505080915050949350505050565b6102916104ac565b6000826040516102a19190610825565b90815260200160405180910390206040518060a00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820180546103769061098c565b80601f01602080910402602001604051908101604052809291908181526020018280546103a29061098c565b80156103ef5780601f106103c4576101008083540402835291602001916103ef565b820191906000526020600020905b8154815290600101906020018083116103d257829003601f168201915b505050505081526020016003820180546104089061098c565b80601f01602080910402602001604051908101604052809291908181526020018280546104349061098c565b80156104815780601f1061045657610100808354040283529160200191610481565b820191906000526020600020905b81548152906001019060200180831161046457829003601f168201915b505050505081526020016004820160009054906101000a900460ff1615151515815250509050919050565b6040518060a00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160608152602001606081526020016000151581525090565b8280546105159061098c565b90600052602060002090601f016020900481019282610537576000855561057e565b82601f1061055057805160ff191683800117855561057e565b8280016001018555821561057e579182015b8281111561057d578251825591602001919060010190610562565b5b50905061058b919061058f565b5090565b5b808211156105a8576000816000905550600101610590565b5090565b60006105bf6105ba846108a3565b61087e565b9050828152602081018484840111156105d757600080fd5b6105e284828561094a565b509392505050565b6000813590506105f981610aad565b92915050565b600082601f83011261061057600080fd5b81356106208482602086016105ac565b91505092915050565b6000806000806080858703121561063f57600080fd5b600061064d878288016105ea565b945050602061065e878288016105ea565b935050604085013567ffffffffffffffff81111561067b57600080fd5b610687878288016105ff565b925050606085013567ffffffffffffffff8111156106a457600080fd5b6106b0878288016105ff565b91505092959194509250565b6000602082840312156106ce57600080fd5b600082013567ffffffffffffffff8111156106e857600080fd5b6106f4848285016105ff565b91505092915050565b6107068161090c565b82525050565b6107158161091e565b82525050565b6000610726826108d4565b61073081856108df565b9350610740818560208601610959565b61074981610a4d565b840191505092915050565b600061075f826108d4565b6107698185610901565b9350610779818560208601610959565b80840191505092915050565b60006107926031836108f0565b915061079d82610a5e565b604082019050919050565b600060a0830160008301516107c060008601826106fd565b5060208301516107d360208601826106fd565b50604083015184820360408601526107eb828261071b565b91505060608301518482036060860152610805828261071b565b915050608083015161081a608086018261070c565b508091505092915050565b60006108318284610754565b915081905092915050565b6000602082019050818103600083015261085581610785565b9050919050565b6000602082019050818103600083015261087681846107a8565b905092915050565b6000610888610899565b905061089482826109be565b919050565b6000604051905090565b600067ffffffffffffffff8211156108be576108bd610a1e565b5b6108c782610a4d565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b60006109178261092a565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b82818337600083830152505050565b60005b8381101561097757808201518184015260208101905061095c565b83811115610986576000848401525b50505050565b600060028204905060018216806109a457607f821691505b602082108114156109b8576109b76109ef565b5b50919050565b6109c782610a4d565b810181811067ffffffffffffffff821117156109e6576109e5610a1e565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f61677265656d656e742077697468207468652073616d6520636f6e74656e742060008201527f696420616c726561647920657869737473000000000000000000000000000000602082015250565b610ab68161090c565b8114610ac157600080fd5b5056fea2646970667358221220e7c8ef1c951c6d661b4e81ebfbdb8a985403df9f1c57056ab0ee7b6f82ca916764736f6c63430008040033";

type ChainAgreementConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ChainAgreementConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ChainAgreement__factory extends ContractFactory {
  constructor(...args: ChainAgreementConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ChainAgreement> {
    return super.deploy(overrides || {}) as Promise<ChainAgreement>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ChainAgreement {
    return super.attach(address) as ChainAgreement;
  }
  connect(signer: Signer): ChainAgreement__factory {
    return super.connect(signer) as ChainAgreement__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ChainAgreementInterface {
    return new utils.Interface(_abi) as ChainAgreementInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ChainAgreement {
    return new Contract(address, _abi, signerOrProvider) as ChainAgreement;
  }
}
